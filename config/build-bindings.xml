<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->

<!--
Defines which library bindings will be build with LWJGL.

This script is included in /config/build-definitions.xml.
-->
<project name="bindings" basedir="../" xmlns:if="ant:if" xmlns:unless="ant:unless">

    <property name="binding.DISABLE_CHECKS" value="false"/>

    <!-- // ========== BINDING FLAGS ======== // -->

    <property name="binding.egl" value="true"/>
    <property name="binding.glfw" value="true"/>
    <property name="binding.openal" value="true"/>
    <property name="binding.opencl" value="true"/>
    <property name="binding.opengl" value="true"/>
    <property name="binding.opengles" value="true"/>
    <property name="binding.stb" value="true"/>
    <property name="binding.vulkan" value="true"/>

    <!-- TODO: automate -->
    <property name="java-only.binding.egl" value="true"/>
    <property name="java-only.binding.opencl" value="true"/>
    <property name="java-only.binding.vulkan" value="true"/>

    <!-- Set the path to the Oculus SDK to enable. -->
    <!-- TODO: add headers in here -->
    <property name="OCULUS_SDK_PATH" location="../../CLONES/OculusSDK" relative="false"/>

    <!-- // ================================ // -->

    <target name="bindings">
        <condition property="binding.ovr" value="true" else="false">
            <and>
                <isset property="OCULUS_SDK_PATH"/>
                <available file="${OCULUS_SDK_PATH}/LibOVR/Include/OVR_CAPI.h"/>
            </and>
        </condition>

        <local name="dependency_problem"/>
        <condition property="dependency_problem" value="1">
            <and>
                <istrue value="${binding.ovr}"/>

                <and>
                    <isfalse value="${binding.opengl}"/>
                    <isfalse value="${binding.vulkan}"/>
                </and>
            </and>
        </condition>
        <fail if="dependency_problem" message="The OpenGL or Vulkan bindings are required."/>

        <condition property="dependency_problem" value="1">
            <and>
                <istrue value="${binding.nanovg}"/>
                <or>
                    <isfalse value="${binding.stb}"/>
                    <and>
                        <isfalse value="${binding.opengl}"/>
                        <isfalse value="${binding.opengles}"/>
                    </and>
                </or>
            </and>
        </condition>
        <fail if="dependency_problem" message="The stb and OpenGL or OpenGL ES bindings are required."/>

        <local name="test"/>
        <script language="javascript">
        var props = LWJGL.getProperties();

        var modules = ["core"];
        var bindings = ["-Dbinding.DISABLE_CHECKS=" + props.get("binding.DISABLE_CHECKS")];
        var javaOnly = [];

        for each (p in props.entrySet()) {
            var name = p.key;
            if (name.startsWith("binding.") &amp;&amp; p.value == "true") {
                var module = name.substring(8);

                modules.push(module);
                bindings.push("-D" + name + "=true");

                if (props.containsKey("java-only." + name)) {
                    javaOnly.push(module);
                }
            }
        }

        LWJGL.setProperty("generator.bindings", bindings.join(" "));
        LWJGL.setProperty("module.list", modules.join(","));
        LWJGL.setProperty("module.list.java-only", javaOnly.join(","));

        var classes = [];
        var templates = [];
        var sources = [];

        modules.forEach(function(it) {
            classes.push("bin/classes/lwjgl/" + it);

            var src = "modules/lwjgl/" + it + "/src";

            templates.push(src + "/main/kotlin");
            sources.push(src + "/generated/java");
            if (java.nio.file.Files.isDirectory(java.nio.file.Paths.get(src + "/main/java"))) {
                sources.push(src + "/main/java");
            }
        });

        LWJGL.setProperty("module.classpath", classes.join(java.io.File.pathSeparator));
        LWJGL.setProperty("module.templatepath", templates.join(java.io.File.pathSeparator));
        LWJGL.setProperty("module.sourcepath", sources.join(java.io.File.pathSeparator));
        </script>
    </target>

    <macrodef name="forEachBinding">
        <element name="body" implicit="yes"/>
        <sequential>
            <parallel threadsPerProcessor="1">
                <sequential if:set="binding.egl"><local name="module"/><property name="module" value="egl"/><body/></sequential>
                <sequential if:set="binding.glfw"><local name="module"/><property name="module" value="glfw"/><body/></sequential>
                <sequential if:set="binding.openal"><local name="module"/><property name="module" value="openal"/><body/></sequential>
                <sequential if:set="binding.opencl"><local name="module"/><property name="module" value="opencl"/><body/></sequential>
                <sequential if:set="binding.opengl"><local name="module"/><property name="module" value="opengl"/><body/></sequential>
                <sequential if:set="binding.opengles"><local name="module"/><property name="module" value="opengles"/><body/></sequential>
                <sequential if:set="binding.stb"><local name="module"/><property name="module" value="stb"/><body/></sequential>
                <sequential if:set="binding.vulkan"><local name="module"/><property name="module" value="vulkan"/><body/></sequential>
            </parallel>
        </sequential>
    </macrodef>

    <macrodef name="forEachModule">
        <element name="body" implicit="yes"/>
        <sequential>
            <sequential>
                <local name="module"/><property name="module" value="core"/>
                <body/>
            </sequential>
            <forEachBinding>
                <body/>
            </forEachBinding>
        </sequential>
    </macrodef>

</project>
