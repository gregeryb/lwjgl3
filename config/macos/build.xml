<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->
<project name="native-macos" basedir="../.." xmlns:if="ant:if" xmlns:unless="ant:unless">
    <import file="../build-definitions.xml"/>

    <!-- Ask Xcode for correct path to XCode tools -->
    <!-- Will fail if XCode Command Line Tools are not installed on 10.7+ (Lion) -->
    <exec executable="xcode-select" outputproperty="developer_path" errorproperty="xcode-error" failonerror="false" failifexecutionfails="false">
        <arg value="--print-path"/>
    </exec>
    <!-- Default to /Developer if xcode-select fails -->
    <condition property="developer_path" value="/Developer">
        <isset property="xcode-error"/>
    </condition>

    <!-- Choose a MacOSX SDK -->
    <macrodef name="find-sdkroot">
        <attribute name="version"/>

        <sequential>
            <condition property="sdkroot" value="${developer_path}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX@{version}.sdk">
                <and>
                    <not><isset property="sdkroot"/></not>
                    <available file="${developer_path}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX@{version}.sdk" type="dir"/>
                </and>
            </condition>
        </sequential>
    </macrodef>

    <find-sdkroot version="10.13"/>
    <find-sdkroot version="10.12"/>
    <find-sdkroot version="10.11"/>
    <find-sdkroot version="10.10"/>
    <find-sdkroot version="10.9"/>
    <fail unless="sdkroot" message="Failed to find the macOS SDK."/>

    <property name="macosx-version-min" value="10.9"/>

    <property name="module.lwjgl.rel" value="../../../../${module.lwjgl}"/>

    <macrodef name="compile">
        <attribute name="dest" default="${dest}"/>
        <attribute name="lang" default="c"/>
        <attribute name="flags" default=""/>
        <attribute name="simple" default="false"/>
        <attribute name="relative" default="true"/>
        <element name="source" implicit="true" optional="true"/>
        <sequential>
            <local name="cpp"/>
            <condition property="cpp"><not><equals arg1="@{lang}" arg2="c"/></not></condition>
            <local name="clang"/>
            <condition property="clang" value="clang" else="clang++"><equals arg1="@{lang}" arg2="c"/></condition>

            <mkdir dir="@{dest}"/>
            <apply dir="@{dest}" executable="${clang}" dest="@{dest}" skipemptyfilesets="true" failonerror="true" parallel="true" taskname="Compiler">
                <arg line="-c -std=c11 -ObjC" unless:set="cpp"/>
                <arg line="-c -std=c++11" if:set="cpp"/>
                <arg line="-O3 -flto -fPIC @{flags} -DNDEBUG -DLWJGL_MACOS -DLWJGL_${build.arch} -isysroot ${sdkroot} -mmacosx-version-min=${macosx-version-min}"/>

                <arg value="-I${jni.headers}"/>
                <arg value="-I${jni.headers}/darwin"/>

                <arg value="-I${module.lwjgl.rel}/core/src/main/c"/>
                <arg value="-I${module.lwjgl.rel}/core/src/main/c/${platform}"/>

                <arg value="-I${src.main.rel}" if:true="@{simple}"/>

                <source/>
                <fileset dir="." includes="${src.generated}/*.c" if:true="@{simple}"/>

                <regexpmapper from="(\w+)\.(?:c(?:c|pp)?|m)$" to="\1.o"/>
            </apply>
        </sequential>
    </macrodef>

    <macrodef name="build">
        <attribute name="module"/>
        <attribute name="linker" default="clang"/>
        <attribute name="lang" default="c"/>
        <attribute name="flags" default="-Werror -Wfatal-errors -Wall -Wextra -pedantic -Wno-extended-offsetof"/>
        <attribute name="simple" default="false"/>
        <element name="beforeCompile" optional="true"/>
        <element name="source" optional="true"/>
        <element name="beforeLink" optional="true"/>
        <element name="link" optional="true"/>
        <sequential>
            <local name="src.main"/>
            <local name="src.main.rel"/>
            <local name="src.generated"/>
            <property name="src.main" location="${module.lwjgl}/@{module}/src/main/c" relative="true"/>
            <property name="src.main.rel" location="${module.lwjgl.rel}/@{module}/src/main/c" relative="true"/>
            <property name="src.generated" location="${module.lwjgl}/@{module}/src/generated/c" relative="true"/>

            <local name="name"/>
            <condition property="name" value="lwjgl" else="lwjgl_@{module}">
                <equals arg1="@{module}" arg2="core"/>
            </condition>

            <local name="dest"/>
            <property name="dest" value="${bin.native}/@{module}"/>

            <beforeCompile/>
            <compile lang="@{lang}" flags="@{flags}" simple="@{simple}">
                <source/>
            </compile>

            <local name="lib-uptodate"/>
            <uptodate property="lib-uptodate" targetfile="${lib}/lib${name}.dylib">
                <srcfiles file="config/${platform}/build.xml"/>
                <srcfiles dir="${dest}" includes="**"/>
            </uptodate>

            <local name="clang"/>
            <condition property="clang" value="@{linker}"><not><equals arg1="@{linker}" arg2="clang"/></not></condition>
            <condition property="clang" value="clang" else="clang++"><equals arg1="@{lang}" arg2="c"/></condition>

            <echo message="Linking ${name}" taskname="${clang}" unless:set="lib-uptodate"/>
            <beforeLink/>
            <apply executable="${clang}" failonerror="true" parallel="true" taskname="Linker" unless:set="lib-uptodate">
                <srcfile/>
                <arg line='-dynamiclib -Wl,-no_compact_unwind -mmacosx-version-min=${macosx-version-min} -o ${lib}/lib${name}.dylib -O3 -flto -fPIC'/>
                <fileset dir="${dest}" includes="*.o"/>
                <link/>
            </apply>

            <apply executable="strip" failonerror="true" taskname="Symbol strip" unless:set="lib-uptodate">
                <arg value="-u"/>
                <arg value="-r"/>
                <filelist dir="${lib}" files="lib${name}.dylib"/>
            </apply>
            <delete file="${lib}/touch_${platform}.txt" quiet="true" unless:set="lib-uptodate"/>
        </sequential>
    </macrodef>

    <macrodef name="build_simple">
        <attribute name="module"/>
        <sequential>
            <build module="@{module}" simple="true" if:true="${binding.@{module}}"/>
        </sequential>
    </macrodef>

    <target name="compile-native-platform">
        <echo message="${sdkroot}" taskname="SDK Root"/>

        <parallel threadsPerProcessor="2">

        <!-- CORE -->
        <build module="core">
            <source>
                <arg value="-I${src.main.rel}/dyncall"/>
                <fileset dir=".">
                    <include name="${src.main}/*.c"/>
                    <include name="${src.generated}/*.c"/>
                    <include name="${src.generated}/${platform}/*.c"/>
                    <include name="${module.lwjgl}/jawt/src/generated/c/*.c" if:true="${binding.jawt}"/>
                </fileset>
            </source>
            <beforeLink>
                <mkdir dir="${lib}/${platform}/x64"/>
                <parallel threadsPerProcessor="2" failonany="true" unless:set="lib-uptodate">
                    <update-dependency name="dyncall" artifact="x64/libdyncall_s.a"/>
                    <update-dependency name="dyncallback" artifact="x64/libdyncallback_s.a"/>
                    <update-dependency name="dynload" artifact="x64/libdynload_s.a"/>
                </parallel>
            </beforeLink>
            <link>
                <arg line="-framework CoreFoundation"/>
                <fileset dir="${lib}/${platform}/${build.arch}/">
                    <include name="libdyn*.a"/>
                </fileset>
            </link>
        </build>

        <!-- OpenGL -->
        <build_simple module="opengl"/>

        <!-- OpenGL ES -->
        <build_simple module="opengles"/>

        <!-- stb -->
        <build_simple module="stb"/>

        </parallel>

        <local name="native-dependencies-uptodate"/>
        <condition property="native-dependencies-uptodate" value="true">
            <or>
                <istrue value="${build.offline}"/>
                <resourceexists>
                    <file file="${lib}/touch_${platform}.txt"/>
                </resourceexists>
            </or>
        </condition>

        <sequential unless:set="native-dependencies-uptodate">
            <mkdir dir="${lib}/${platform}/x64"/>

            <parallel threadsPerProcessor="4" failonany="true">

            <update-dependency name="GLFW" artifact="x64/libglfw.dylib" dest="${lib}" if:true="${binding.glfw}"/>
            <update-dependency name="OpenAL32" artifact="x64/libopenal.dylib" dest="${lib}" if:true="${binding.openal}"/>

            </parallel>

            <touch file="${lib}/touch_${platform}.txt" verbose="false"/>
        </sequential>
    </target>
</project>